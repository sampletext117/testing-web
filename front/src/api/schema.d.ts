/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Вход в систему
         * @description Принимает email и пароль; если данные корректны, возвращает JWT-токен.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["LoginRequest"];
                };
            };
            responses: {
                /** @description Успешный вход */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Неверные учетные данные */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Регистрация в систему
         * @description Принимает email и пароль и роль, возвращает JWT-токен.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RegisterRequest"];
                };
            };
            responses: {
                /** @description Успешный вход */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["LoginResponse"];
                    };
                };
                /** @description Данные уже существуют */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/change-password": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Смена пароля
         * @description Принимает email, текущий пароль и новый пароль. Возвращает статус операции.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["ChangePasswordRequest"];
                };
            };
            responses: {
                /** @description Пароль успешно изменен */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": {
                            /** @example Password changed successfully */
                            detail?: string;
                        };
                    };
                };
                /** @description Неверный текущий пароль */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Пользователь не найден */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/2fa": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Двухфакторная аутентификация
         * @description Проверяет введенный код 2FA.
         */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["TwoFARequest"];
                };
            };
            responses: {
                /** @description Успешная верификация */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["TwoFAResponse"];
                    };
                };
                /** @description Неверный код 2FA */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Пользователь не найден */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/voters": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список избирателей */
        get: operations["listVoters"];
        put?: never;
        /** Зарегистрировать нового избирателя */
        post: operations["createVoter"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/voters/{voter_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить информацию об избирателе по ID */
        get: operations["getVoter"];
        put?: never;
        post?: never;
        /** Удалить избирателя (пример) */
        delete: operations["deleteVoter"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/candidates": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Список кандидатов */
        get: operations["listCandidates"];
        put?: never;
        /** Регистрация кандидата */
        post: operations["createCandidate"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/candidates/{candidate_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить информацию о кандидате */
        get: operations["getCandidate"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** Частичное обновление данных кандидата */
        patch: operations["patchCandidate"];
        trace?: never;
    };
    "/v1/elections": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список выборов */
        get: operations["listElections"];
        put?: never;
        /** Создать новые выборы */
        post: operations["createElection"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/elections/{election_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Детальная информация о выборах */
        get: operations["getElection"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/votes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить список голосов */
        get: operations["listVotes"];
        put?: never;
        /** Проголосовать */
        post: operations["createVote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/v1/results": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Получить результаты конкретных выборов */
        get: operations["getResults"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        Voter: {
            voter_id?: number;
            full_name?: string;
            /** Format: date */
            birth_date?: string;
            passport_id?: number;
            /** Format: date-time */
            created_at?: string;
        };
        VoterCreateRequest: {
            full_name: string;
            /** Format: date */
            birth_date: string;
            passport_number: string;
            issued_by?: string | null;
            /** Format: date */
            issue_date?: string | null;
            country: string;
        };
        Candidate: {
            candidate_id?: number;
            full_name?: string;
            /** Format: date */
            birth_date?: string;
            passport_id?: number;
            campaign_program_id?: number | null;
            account_id?: number | null;
            /** Format: date-time */
            created_at?: string;
        };
        CandidateCreateRequest: {
            full_name: string;
            /** Format: date */
            birth_date: string;
            passport_number: string;
            issued_by?: string | null;
            /** Format: date */
            issue_date?: string | null;
            country: string;
            program_description?: string | null;
            /** Format: float */
            initial_balance?: number | null;
        };
        /** @description Поля, которые можно частично обновлять у кандидата. */
        CandidatePatchRequest: {
            program_description?: string | null;
            /** Format: float */
            balance?: number | null;
        };
        Election: {
            election_id?: number;
            election_name?: string;
            /** Format: date */
            start_date?: string;
            /** Format: date */
            end_date?: string;
            description?: string | null;
        };
        ElectionCreateRequest: {
            election_name: string;
            /** Format: date */
            start_date: string;
            /** Format: date */
            end_date: string;
            description?: string | null;
        };
        Vote: {
            vote_id?: number;
            voter_id?: number;
            candidate_id?: number;
            election_id?: number;
            /** Format: date-time */
            vote_date?: string;
        };
        VoteCreateRequest: {
            voter_id: number;
            candidate_id: number;
            election_id: number;
        };
        CandidateWithCount: {
            candidate_id?: number;
            candidateName?: string;
            voteCount?: number;
        };
        ElectionResults: {
            election_id?: number;
            election_name?: string | null;
            totalVotes?: number;
            results?: components["schemas"]["CandidateWithCount"][];
            winner?: components["schemas"]["CandidateWithCount"];
        };
        LoginRequest: {
            /** @example user@example.com */
            email?: string;
            /** @example secret */
            password?: string;
        };
        LoginResponse: {
            /** @example eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9... */
            token?: string;
        };
        RegisterRequest: {
            /** @example user@example.com */
            email?: string;
            /** @example secret */
            password?: string;
            /** @enum {string} */
            role?: "admin" | "voter" | "candidate";
        };
        ChangePasswordRequest: {
            /** @example user@example.com */
            email?: string;
            /** @example oldpassword */
            current_password?: string;
            /** @example newpassword */
            new_password?: string;
        };
        TwoFARequest: {
            /** @example user@example.com */
            email?: string;
            /** @example 123456 */
            code?: string;
        };
        TwoFAResponse: {
            /** @example 2FA verification successful */
            detail?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    listVoters: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Успешный ответ (список избирателей) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Voter"][];
                };
            };
            /** @description Неверные параметры запроса */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createVoter: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoterCreateRequest"];
            };
        };
        responses: {
            /** @description Избиратель успешно создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Voter"];
                };
            };
            /** @description Некорректные данные (например, неверная дата рождения) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Конфликт (например, паспорт уже зарегистрирован) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getVoter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                voter_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Voter"];
                };
            };
            /** @description Неверный ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Избиратель не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    deleteVoter: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                voter_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Избиратель удалён успешно */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Неверный ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Избиратель не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listCandidates: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Возвращает список кандидатов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Candidate"][];
                };
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка сервера */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createCandidate: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CandidateCreateRequest"];
            };
        };
        responses: {
            /** @description Кандидат создан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Candidate"];
                };
            };
            /** @description Невалидные данные (возраст, поля не заполнены) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Конфликт (паспорт уже существует) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getCandidate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                candidate_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Candidate"];
                };
            };
            /** @description Неверный ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Кандидат не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    patchCandidate: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                candidate_id: number;
            };
            cookie?: never;
        };
        /** @description Передаём только те поля, которые хотим обновить */
        requestBody: {
            content: {
                "application/json": components["schemas"]["CandidatePatchRequest"];
            };
        };
        responses: {
            /** @description Данные кандидата обновлены */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Candidate"];
                };
            };
            /** @description Некорректные данные (например, отрицательный баланс) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не найдено */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Конфликт */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listElections: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список выборов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Election"][];
                };
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createElection: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ElectionCreateRequest"];
            };
        };
        responses: {
            /** @description Выборы созданы */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Election"];
                };
            };
            /** @description Невалидные даты (end_date < start_date) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Конфликт (выборы уже существуют) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getElection: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                election_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Election"];
                };
            };
            /** @description Неверный ID */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не найден */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    listVotes: {
        parameters: {
            query?: {
                election_id?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Список голосов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"][];
                };
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    createVote: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["VoteCreateRequest"];
            };
        };
        responses: {
            /** @description Голос успешно записан */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Vote"];
                };
            };
            /** @description Невалидные данные (возраст <18, уже голосовал, не РФ) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено (например, выборы закрыты) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Избиратель / кандидат / выборы не найдены */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Конфликт (уже голосовал?) */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    getResults: {
        parameters: {
            query: {
                /** @description ID выборов, для которых нужно вывести итоги */
                election_id: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Результаты выборов */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ElectionResults"];
                };
            };
            /** @description Неверные параметры */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Не авторизован */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Запрещено (например, итоги ещё нельзя смотреть) */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Выборы не найдены */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Внутренняя ошибка */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
